commonLabels:
  cluster-name: {{ .Values | get "clusterName" }}
  cluster-id: {{ .Values | get "clusterId" | quote }}

alertmanager:
  enabled: false # TODO enable after test
  alertmanagerSpec:
    resources:
      limits:
        cpu: 40m
        memory: 50Mi
      requests:
        cpu: 40m
        memory: 50Mi

# TODO set pod requests/limits
#https://github.com/particuleio/terraform-kubernetes-addons/blob/main/modules/aws/kube-prometheus.tf
grafana:
  {{ if or (.Values | get "isObserver") (eq .Values.clusterType "minikube") }}
  adminPassword: {{ .Values | get "grafanaAdminPassword" }}
  service:
    type: NodePort
    annotations:
      dns.alpha.kubernetes.io/external: grafana.{{ .Values | get "clusterName" }}
  deploymentStrategy:
    type: Recreate
  persistence:
    enabled: true
    type: pvc
#    storageClassName: default
    accessModes:
    - ReadWriteOnce
    size: 2Gi
    finalizers:
    - kubernetes.io/pvc-protection
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      labelValue: "1"
      folder: /var/lib/grafana/dashboards/sidecar
      provider:
        foldersFromFilesStructure: true
      multicluster:
        global:
          enabled: true
        etcd:
          enabled: true
    datasources:
      defaultDatasourceEnabled: false
  additionalDataSources:
    - name: Prometheus
      type: prometheus
      uid: prometheus
      url: http://kube-prometheus-stack-prometheus.monitoring:9090/
      access: proxy
      isDefault: true # TODO undefault when thanos is enabled
      jsonData:
        timeInterval: 10s
    - name: thanos
      access: proxy
      editable: false
      orgId: 1
      type: prometheus
      url: http://thanos-query-frontend.monitoring.svc.cluster.local:9090
      version: 1
      isDefault: false # TODO make default when thanos is enabled
      # https://github.com/helm/charts/issues/16006 for multipe dashboard providers with sidecar
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: 'Default'
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/default

  dashboards:
    # TODO set proper datasource for each (i.e. thanos/prometheus or other)
    default:
      thanos-overview:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/overview.json
      thanos-compact:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/compact.json
      thanos-query:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/query.json
      thanos-store:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/store.json
      thanos-receiver:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/receive.json
      thanos-sidecar:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/sidecar.json
      thanos-rule:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/rule.json
      thanos-replicate:
        url: https://raw.githubusercontent.com/thanos-io/thanos/master/examples/dashboards/bucket-replicate.json
      cluster-autoscaler:
        gnetId: 3831
        revision: 1
        datasource: prometheus # TODO use thanos if enabled
  {{ else }}
  enabled: false
  {{ end }}

prometheusOperator:
  admissionWebhooks:
    patch:
      resources:
        limits:
          cpu: 30m
          memory: 50Mi
        requests:
          cpu: 30m
          memory: 30Mi
  resources:
    limits:
      cpu: 50m
      memory: 150Mi
    requests:
      cpu: 50m
      memory: 50Mi

prometheus:

  {{ if (.Values | get "thanosEnabled") }}
  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true
  {{ end }}

  prometheusSpec:
    image:
      repository: quay.io/prometheus/prometheus
      tag: v2.36.2
      sha: ""
    enableFeatures:
      - memory-snapshot-on-shutdown
    retention: 3h
    # Thanos uploads every 2 hours
    # set --storage.tsdb.min-block-duration and --storage.tsdb.max-block-duration
    # to same value (default 2h) to disable local Prom compactor
    # This value also defines how often Thanos uploads Prom blocks

    {{ if and (not (eq .Values.clusterType "minikube")) (.Values | get "thanosEnabled") }} # TODO figure out minikube setup
    thanos:
      image: quay.io/thanos/thanos:v0.24.0
      version: v0.24.0
      objectStorageConfig:
        name: thanos-objstore-config-secret
        key: objstore.yml
    {{ end }}
    serviceMonitorSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 2Gi
    externalLabels:
      cluster: {{ .Values | get "clusterName" }}
      cluster_id: {{ .Values | get "clusterId" | quote}}
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 300Mi
  server:
    persistentVolume:
      enabled: true

kubelet:
  serviceMonitor:
    https: true

kube-state-metrics:
  metricLabelsAllowlist:
    - nodes=[*]
    - pods=[*]
    - statefulsets=[*]