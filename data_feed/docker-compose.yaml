# https://github.com/stefanprodan/dockprom/

# TODO telegram bot
# https://github.com/metalmatze/alertmanager-bot

version: "3.9"
volumes:
  prometheus_data:
  grafana_data:
services:
  prometheus:
    image: prom/prometheus:v2.32.1
    container_name: prometheus
    volumes:
      - ./common_services/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: always
    ports:
      - '9090:9090'
    expose:
      - 9090

  alertmanager:
    image: prom/alertmanager:v0.23.0
    container_name: alertmanager
    volumes:
      - ./common_services/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yaml'
      - '--storage.path=/alertmanager'
    restart: always
    ports:
      - '9093:9093'
    expose:
      - 9093

  grafana:
    image: grafana/grafana:8.3.3
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./common_services/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./common_services/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    ports:
      - '3000:3000'
    expose:
      - 3000

  redis:
    image: redis:alpine
    container_name: redis
    expose:
      - 6379
    command: [ "redis-server", "--save", "''", "--appendonly", "no" ]

  mysql:
    image: mysql:latest
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    ports:
      - '3306:3306'
    expose:
      - 3306
    environment:
      - MYSQL_ROOT_PASSWORD=root # should be in sync with secrets_DO_NOT_COMMIT.env
    # TODO depends_on dumper-restorer for correct shutdown sequence and dump?

  svoe_data_feed:
    image: svoe_data_feed_dev
    container_name: svoe_data_feed
    build:
      context: .
      dockerfile: Dockerfile-dev
    restart: always
    # TODO healthcheck
    volumes:
      - ./data-feed-config.yaml:/etc/svoe/data_feed/configs/data-feed-config.yaml
      - ../../cryptofeed:/etc/svoe/local_packages/cryptofeed # mounts local python project to use instead of pip packages
      - ../../cryptostore:/etc/svoe/local_packages/cryptostore
    env_file:
      - ./secrets_DO_NOT_COMMIT.env
    environment:
      - ENV=DEV
      - PROMETHEUS_MULTIPROC_DIR=/etc/svoe/data_feed/prometheus_multiproc_dir
    depends_on:
      - mysql
      - redis
    ports:
      - '1234:1234'
      - '8000:8000'
    expose:
      - 1234
      - 8000

  dumper_restorer:
    # TODO add on-destroy hook and launch dump script
    command: sh -c "/scripts/mysqls3init.sh; /scripts/mysqls3restore.sh; while true; do echo 'Sleeping 30s...' && sleep 30; done;"
    image: alpine:latest
    container_name: dumper_restorer
    restart: always
    volumes:
      - ../helm/charts/local/mysql-extra/scripts/mysqls3init.sh:/scripts/mysqls3init.sh
      - ../helm/charts/local/mysql-extra/scripts/mysqls3restore.sh:/scripts/mysqls3restore.sh
      - ../helm/charts/local/mysql-extra/scripts/mysqls3dump.sh:/scripts/mysqls3dump.sh
    env_file:
      - ./secrets_DO_NOT_COMMIT.env
